Следствие теоремы Турчина
________________________________________________________________
Пусть G - алфавитная префиксная грамматик, в которой N правил с непустой правой частью, и максимальная длина правой части правила равна M. Тогда любая последовательность порождаемых ею слов
a_1...a_n
...
ε
длиной не менее N^M*(n+1) содержит пару вида τ_1=Φ*Θ_0, τ_2=Φ*Ψ*Θ_0 такую, что |Φ|<=M и на отрезке [τ_1, τ_2] нет слов длины меньше |Θ_0|+1.
================================================================
Критерий синхронизации
________________________________________________________________
DFA A синхронизирующийся <=> ∀q,q'∃w, q_x(q-w->q_x & q' -w->q_x).
================================================================
Доказать лемму Огдена
Введем следующие обозначения: m=|N| и l — длина самой длинной правой части правила из P. Тогда в качестве n возьмем l2m+3. Рассмотрим дерево разбора T для произвольного слова ω∈L(Γ), у которого |ω|⩾n. В силу выбора n в T будет по крайне мере один путь от корня до листа длины не менее 2m+3. Произвольным образом выделим в ω не менее n позиций. Соответствующие этим позициям листья дерева T будем называть выделенными.

Пусть v1 — корень T, а vi+1 — сын vi, который имеет среди своих потомков наибольшее число выделенных листьев (если таких несколько, то vi+1 самый правый из них). Рассмотрим v1,v2,…,vp — путь от корня до листа.

Будем называть ветвящейся ту вершину, у которой по крайне мере два сына имеют выделенных потомков. Докажем по индукции, что если среди v1,v2,…,vi вершин есть k ветвящихся, то vi+1 имеет хотя бы l2m+3−k выделенных потомков.
База индукции: i=0. Тогда k=0 и v1 имеет по крайне мере n выделенных потомков, поскольку является корнем.
Индукционный переход. Если vi не является ветвящейся вершиной, то vi+1 имеет такое же число ветвящихся потомков, как и vi. Если vi — ветвящаяся вершина, то vi+1 имеет не более чем в l раз меньшее число выделенных потомков.

Поскольку v1 имеет хотя бы n=l2m+3 выделенных потомков, то v1,v2,…,vp содержит по крайне мере 2m+3 ветвящиеся вершин. Заметим, что vp — лист, поэтому p>2m+3.
Будем называть vi левой ветвящейся вершиной, если ее сын, не принадлежащий пути v1,v2,…,vp, имеет выделенного потомка, лежащего слева от vp. В противном случае назовем vi правой ветвящейся вершиной. Рассмотрим последние 2m+3 вершины, принадлежащие пути v1,v2,…,vp. Предположим, что хотя бы m+2 вершины — левые ветвящиеся (случай, когда хотя бы m+2 вершины — правые ветвящиеся, разбирается аналогично). Пусть u1,u2,…,um+2 — последние m+2 левые ветвящиеся вершины. Поскольку m=|N|, то среди них можно найти как минимум две вершины, соответствующие одному нетерминалу. Обозначим эти вершины a и b, причем b — потомок a. Тогда на рисунке показано, как представить ω в требуемом виде.

Условие (1) выполнено, поскольку x содержит выделенную вершину, а именно vp. Очевидно, что условие (4) выполнено в силу предложенного разбиения ω. Кроме того, u содержит выделенную вершину, а именно потомка некоторого сына вершины u1. Аналогично, выделенный потомок некоторого сына вершины a содержится в v. Таким образом, условие (2) выполнено. Поскольку между vp и a не более 2m+3 вершин, вершина a имеет не более n выделенных потомков, поэтому условие (3) выполнено.
================================================================
Докажите, что множество автоматных грамматик образует булеву алгебру
________________________________________________________________
Класс регулярных множеств образует булеву алгебру. Класс регулярных множеств замкнут
относительно реверса?
Ω=<∨,∧,¬> - сигнатура булевой алгебры
Свойства булевой алгебры:
● A∧B=B∧A - коммутативность по умножению
● A∧(B∧C)=(A∧B)∧C - ассоциативность по умножению
● A∧(B∨C)=(A∧B) ∨(A∧C) - дистрибутивность
● ¬¬A=A
● A∨¬A=1
● A∧¬A=0
● A∧1=A
● A∧0=A
● A∨0=A
● A∨1=1
Доказательство:
Свойства операций сложения и умножения следуют из Леммы о регулярных выражениях
Дополнение регулярного множества является регулярным ⇐ если множество регулярно, то оно
распознаётся автоматом. Если в автомате M изменить множество конечных состояний на Q\F, то
получим автомат , который распознаёт дополнение к заданному языку.
================================================================
Сформулировать теорему Майхилла-Нероуда
________________________________________________________________
Язык L является VPL => множество сбалансированных слов(т.е. таких, каждый символ из Σ_с в которых имеет соответствующий символ из Σ_r) разбивается на конечное число классов эквивалентности по Майхиллу-Нероуду относительно L.
================================================================
Что такое конъюктивная грамматика?
________________________________________________________________
Конъюнктивная грамматика G - грамматика, правила которой имеют вид A_i -> Φ_1 & ... & Φ_2 где A_i - нетерминал; Φ_j - строки в смешанном алфавите терминалов и нетерминалов.
================================================================
Что такое древесный автомат?
________________________________________________________________
Древесный автомат задается входным алфавитом(сигнатурой конструкторов) Σ⊂{⟨f, n⟩} и конечным состоянием, а также правилами перехода: ⟨f, n⟩ ∈ Σ => (q_1,..., q_n, f)->q_s.
================================================================
Следствия теоремы Париха
________________________________________________________________
1)Множества регулярных и КС-языков над однобуквенным алфавитом совпадают.
2)Коммутативным образом КС-языка является регулярный язык.
================================================================
Пересечение КС-грамматики и регулярного языка
________________________________________________________________
Даны КС-грамматика G и конечный автомат A. Можно построить КС-грамматику G' такую, что L(G')=L(G)∩L(A).
================================================================
Что такое стековый автомат?
________________________________________________________________
Стековый автомат A - кортеж ⟨Π, Σ, Q, δ, q_0, Z_0⟩, где:
Π - алфавит стека;
Σ - алфавит языка;
Q - множество состояний;
δ - правила перехода вида ⟨q_i, t, P_i⟩ -> ⟨q_j, α⟩, где t ∈ Σ ∪ {ε}, α ∈ Π*
q_0 - стартовое сотояние;
Z_0 - дно стека.
================================================================
Доказать алгоритм Эрли
________________________________________________________________⟹

Докажем индукцией по исполнению алгоритма.
База индукции:
[S′→⋅S,0]∈D0.
Индукционный переход:
Пусть предположение верно для всех списков ситуаций с номерами меньше j. Разберемся, в результате применения какого правила ситуация [A→α⋅β,i] попала в Dj
1. Включаем по правилу scan. Это произошло, если α=α′a, a=wj−1 и [A→α′⋅aβ,i]∈Dj−1.
По предположению индукции S′⇒∗w0…wi−1Aδ и α′⇒∗wi…wj−2, тогда в силу a=wj−1 получаем α=α′a⇒∗wi…wj−2wj−1=wi…wj−1. Таким образом условия: S′⇒∗w0…wi−1Aδ и α⇒∗wi…wj−1 выполняются.
2. Включаем по правилу predict. По построению: α=ε и i=j, что автоматически влечет второй пункт утверждения.
Кроме того ∃i′≤i и ситуация [A′→α′⋅Aδ′,i′]∈Di, из чего по  предположению индукции следует S′⇒∗w0…wi′−1A′δ′′ и α′⇒∗wi′…wi−1.
Получаем, что S′⇒∗w0…wi′−1A′δ′′, значит S⇒∗w0…wi′−1α′Aδ′δ′′, следовательно S′⇒∗w0…wi′−1wi′…wi−1Aδ′δ′′, в итоге S′⇒∗w0…wi−1Aδ, что нам и требовалось.
3. Включаем по правилу complete. По построению: α=α′A′ и ∃i′,δ:[A→α′⋅A′β,i]∈Di′∧[A′→η⋅,i′]∈Dj. Cледовательно α=α′A ⇒∗wi…wi′−1wi′…wj=wi…wj−1, что дает нам второй пункт утверждения, а так как первый пункт следует из индукционного предположения, все хорошо.

⟸

В обратную сторону будем доказывать индукцией по суммарной длине вывода w0…wi−1Aδ  из S′ и wi…wj−1 из α. После чего применим индукцию по длине вывода wi…wj−1 из α. Рассмотрим три случая последнего символа α:
1. α=α′a, тогда a=wj−1 и α′⇒∗wi…wj−2. По предположению индукции: [A→α′⋅aβ,i]∈Dj−1, а отсюда по правилу scan получаем [A→α′a⋅β,i]∈Dj.
2. α=α′B, тогда ∃i′:α′⇒∗wi…wi′−1∧B′⇒∗wi′…wj−1.Тогда имеем [A→α′a⋅β,i]∈Dj. Также можно записать S′⇒∗w0…wi−1Aδ, как S′⇒∗w0…wi−1wi…wi′−1Bβδ, а также B→η∧η→wi′…wj−1.
Применяя индукцию по второму параметру получим [B→η⋅,i′]∈Dj, откуда по правилу complete получаем [A→α′B⋅β,i]∈Dj.

3. α=ε, тогда i=j. Тогда либо i=0∧A=S∧δ=ε, что доказывает базу индукции, либо вывод можно записать в виде S′⇒∗w0…wi′−1wi′…wi−1Aδ′δ′′=w0…wi−1Aδ для некоторого правила (A′→wi′…wi−1Aδ′)∈P.
Отсюда по предположению индукции [A′→⋅wi′…wi−1Aδ′,i′]∈Di′ , что после нескольких применений правила scan приводит к [A′→wi′…wi−1⋅Aδ′,i′]∈Di, после чего по правилу predict  получим [A→⋅β,i]∈Dj, что и требовалось.
================================================================
LL-подгонка
________________________________________________________________
●Устранение левой рекурсии
●Извлечение левого контекста:
Если даны A->Φγ_1, A-> Φγ_2, тогда можно построить эквивалентные правила A -> ΦA', A'-> γ_1|γ_2.
