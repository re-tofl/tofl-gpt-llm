1.  Сколько решений может иметь уравнение с регулярными коэффициентами?
_______________________________________________________________
Не все уравнения с регулярными коэффициентами имеют единственное решение. Например: X = (альфа)X+(бетта) 
— уравнение с регулярными коэффициентами, и (альфа) обозначает множество, содержащее пустую 
цепочку (эпсилон) , то X = (альфа)*(бетта + гамма) будет решением этого уравнения для любого гамма (гамма не обязано даже быть 
регулярным). Таким образом уравнение имеет бесконечное множество решений. Тогда мы будем 
брать наименьшее решение, которое назовём наименьшей неподвижной точкой. Наименьшая 
неподвижная точка для нашего уравнения — X = (альфа) * (бетта).
===============================================================
2. В каком случае применим метод рекурсивного спуска?
_______________________________________________________________
Метод рекурсивного спуска применим в том случае, если каждое правило
грамматики имеет вид:
a) либо A -> (альфа), где (альфа) (принадлежит) (VT (объединить) VN)* и это единственное правило вывода для
этого нетерминала;
b) либо A -> a1(альфа)1 | a2(альфа)2 | ... | an(альфа)n, где ai (принадлежит) VT для всех i = 1,2,...,n; ai не равно aj для i не равно
j; (альфа)i (принадлежит) (VT (объединить) VN)*
, т. е. если для нетерминала А правил вывода несколько, то они
должны начинаться с терминалов, причем все эти терминалы должны быть
различными.
===============================================================
3. Если грамматика не имеет вид, к которому возможно применить метод рекурсивного спуска, то существует ли эквивалентная КС-грамматика, для которой метод рекурсивного спуска применим? 
________________________________________________________________
К сожалению, нет алгоритма, отвечающего на
поставленный вопрос, т.е. это алгоритмически неразрешимая проблема.
================================================================
4. Конструкция автомата Глушкова. 
________________________________________________________________
Алгоритм построения Glushkov(r)
1. Строим линеаризованную версию r: r(Lin) = Linearize(r).
2. Ищем First(r(Lin)), Last(r(Lin)) и Follow(r(Lin))(c) для всех
c принадлежащих (Сумма(r(Lin))) .
3. Все состояния автомата, кроме начального (назовём его S),
соответствуют буквам c принадлежит (Сумма(r(Lin))) .
4. Из начального состояния строим переходы в те состояния,
для которых c принадлежит First(r(Lin)). Переходы имеют вид S -> c по с.
5. Переходы из состояния c соответствуют элементам d
множества Follow(r(Lin))(c) и имеют вид c -> d по d.
6. Конечные состояния — такие, что c принадлежит Last(r(Lin)), а также S,
если эпсилон принадлежит L(R).
7. Теперь стираем разметку, построенную линеаризацией, на
переходах автомата. Конструкция завершена. 
================================================================
5. Является ли автомат Glushkov(r) детерминированным для 1-однозначных регулярных выражений?
_______________________________________________________________
Да, является. Эту его особенность активно используют в современных библиотеках регулярных
выражений, например, в RE2. Выигрыш может получиться
колоссальным: например, Thompson((a∗)∗) является экспоненциально неоднозначным, а Glushkov((a∗)∗) однозначен и детерминирован.
===============================================================
6. Какое свойство есть для подграфов, распознающих регулярные выражения, являющихся подструктурами исходного графа?
_______________________________________________________________
Подграфы, распознающие регулярные выражения, являющиеся
подструктурами исходного, не имеют общих вершин. Это
свойство автомата Глушкова используется в реализациях
match-функций некоторых библиотек регулярных выражений.
===============================================================
7. Пример работы алгоритма Глушкова.
_______________________________________________________________
Рассмотрим регулярное выражение e=(a(ab)∗)∗+(ba)∗ :
1. Линеаризуем его путем добавления индекса к каждому символу:
e′=(a1(a2b3)∗)∗+(b4a5)∗.
2. Составим множества P, S, и N:
P(e′)={a1,b4},
S(e′)={a1,b3,a5},
N(e′)={a1a2,a1a1,a2b3,b3a1,b3a2,b4a5,a5b4}.
Так как пустое слово принадлежит языку, то Λ(e′)={эпсилон}*.
*Λ(e′)={эпсилон}(пересечь)L(e′)
3. Автомат локального языка L′=P′B∗(пересечь)B∗S′∖B∗(B2∖N′)B∗ содержит начальное состояние, обозначенное как 1, и состояния для каждого из пяти символов алфавита B={a1,a2,b3,b4,a5}.
В построенном автомате существует переход из 1 (соответствующего пустой строке) в два состояния из P′, переход из a в b если ab(принадлежит)N′, три состояния S терминальные (как и состояние 1).
Получим автомат для L(e), удалив индексы, добавленные на первом этапе.
===============================================================
8. Суть алгоритма Томпсона или как сделать из НКА ДКА?
_______________________________________________________________
Алгоритм Томпсона
Убрать одноимённые переходы и избавиться от (эпсилон)-переходов. В алгоритме Томпсона если рассматривать КА как граф, то это классический BFS (обход в ширину), с схлопыванием (эпсилон)-переходов и объединением состояний, в которые ведут одноимённые переходы. Давайте к алгоритму, а затем и к примеру – там будет понятнее.

Шаг 1. Помещаем в очередь Queue множество, состоящее только из стартовой вершины.
Шаг 2. Затем, пока очередь не пуста выполняем следующие действия:

Достаем из очереди множество, назовем его q

Для всех c (принадлежит) (сигма) посмотрим в какое состояние ведет переход по символу c из каждого состояния в q. Полученное множество состояний положим в очередь Queue только если оно не лежало там раньше. Каждое такое множество в итоговом ДКА будет отдельной вершиной, в которую будут вести переходы по соответствующим символам.

Если в множестве q хотя бы одна из вершин была терминальной в НКА, то соответствующая данному множеству вершина в ДКА также будет терминальной.

Вход: НKA = (Q, (сигма), (дельта), q0, F).
Выход: ДКА = (Q', (сигма), (дельта)', q0', F').
Резюме: Единственное начальное состояние. Единственное конечное состояние. Не больше двух переходов из каждого состояния (по построению).
===============================================================
9. Асимптотика алгоритма Томпсона.
_______________________________________________________________
Так как количество подмножеств множества состояний НКА не более, чем 2n, а каждое подмножество мы обрабатываем ровно один раз за время O(n), получаем верхнюю оценку времени работы алгоритма — O(n*2n).
===============================================================
10. Каким может быть количество состояний в НКА по сравнению с количеством состояний в эквивалентном ДКА?
_______________________________________________________________
Количество состояний в НКА может быть экспоненциальным по сравнению с количеством состояний в эквивалентном ДКА.
===============================================================
11. Описание НКА через матрицы.
_______________________________________________________________
НКА можно описать посредством трёх матриц: вектор начальных состояний (в классическом определении оно одно); матрица переходов между состояниями; и вектор конечных состояний.
Тогда естественно строить объединение, конкатенацию и
итерацию НКА посредством матричных операций.
===============================================================
12. Какой вид грамматики не следует использовать при реализации алгоритма нисходящего разбора?
_______________________________________________________________
Метод требует чтобы используемая КС грамматика была не Леворекурсивная грамматика, т.к. это ведёт к зацикливанию метода, поэтому при использовании алгоритмов нисходящего разбора левую рекурсию необходимо удалить.
===============================================================
13. Сформулируй утверждение (Куроки–Суонио).
_______________________________________________________________
Всякая LL(k)-грамматика может быть преобразована в LL(k+1)-грамматику без (эпсилон)-правил.
===============================================================
14. Что означает термин "ловушка" при построении ДКА?
_______________________________________________________________
«Ловушка» — не конечное состояние с переходами лишь в себя. Нужны для корректного задания ДКА, но иногда по умолчанию не описываются. Используем при построении автомата.
===============================================================
15. Минусы алгоритма Томпсона.
_______________________________________________________________
Недетерминизм - часто происходят недетерминированные переходы.
===============================================================