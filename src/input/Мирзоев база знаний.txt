Грамматика в нормальной форме Хомского это
________________________________________________________________
Грамматикой в нормальной форме Хомского (англ. Chomsky normal form) называется контекстно-свободная грамматика, в которой могут содержаться правила только следующего вида:
A→BC,
A→a,
S→ε,
где:
a — терминал, 
A,B,C — нетерминалы, 
S — стартовая вершина,
ε — пустая строка, стартовая вершина не содержится в правых частях правил.
================================================================
Докажи теорему: Любую контекстно-свободную грамматику можно привести к нормальной форме Хомского.
________________________________________________________________
Рассмотрим контекстно-свободную грамматику Γ. Для приведения ее к нормальной форме Хомского необходимо выполнить пять шагов. На каждом шаге мы строим новую Γi, которая допускает тот же язык, что и Γ.

Уберём длинные правила.
Воспользуемся алгоритмом удаления длинных правил из грамматики. Получим грамматику Γ1, эквивалентную исходной, содержащую правила длины 0,1 и 2.
Удаление ε - правил.
Воспользуемся алгоритмом удаления ε - правил из грамматики. Получим грамматику Γ2, эквивалентную исходной, но в которой нет ε - правил.
Удаление цепных правил.
Воспользуемся алгоритмом удаления цепных правил из грамматики. Алгоритм работает таким образом, что новые ε - правила не образуются. Получим грамматику Γ3, эквивалентную Γ.
Удалим бесполезные символы.
Воспользуемся алгоритмом удаления бесполезных символов из грамматики. Так как Γ3
эквивалентна Γ, то бесполезные символы не могли перестать быть бесполезными. Более того, мы только удаляем правила, новые ε-правила и цепные правила не могли появиться.
Уберём ситуации, когда в правиле встречаются несколько терминалов.
Для всех правил вида A→u1u2
(где ui — терминал или нетерминал) заменим все терминалы ui на новые нетерминалы Ui и добавим правила Ui→ui. 
Теперь правила содержат либо одиночный терминал, либо строку из двух нетерминалов.
Таким образом, мы получили грамматику в нормальной форме Хомского, которая допускает тот же язык, что и Γ.

Стоит заметить, что порядок выполнения операций важен. Первое правило должно быть выполнено перед вторым, иначе время нормализации ухудшится до O(2|Γ|). Третье правило идет после второго, потому что после удаления ε-правил, могут образоваться новые цепные правила. Также четвертое правило должно быть выполнено позже третьего и второго, так как они могут порождать бесполезные символы.

При таком порядке действий размеры грамматики возрастают полиномиально.

После удалении длинных правил из каждого правила длины k⩾3 могло появиться k−1 новых правил, причем их длина не превышает двух. На этом шаге размер грамматики возрастает не более, чем вдвое.

При удалении ε-правил из грамматики, содержащей правила длины 0,1 и 2, размеры грамматики могли вырасти не больше, чем в 3 раза.

Всего цепных правил в грамматике не больше, чем n2, где n — число нетерминалов. При удалении цепных правил мы берем каждую из цепных пар и производим добавление нецепных правил, выводимых из второго нетерминала в паре. Если максимальная суммарная длина всех правил, выводимых из какого-либо нетерминала, равна k, то размер грамматики возрастет не больше, чем на k⋅n2.

Наконец, на последнем шаге может произойти добавление не более, чем |Σ|(Σ— алфавит грамматики) новых правил, причем все они будут длины 1.
================================================================
Грамматика в ослабленной нормальной форме Грейбах
________________________________________________________________
Грамматикой в ослабленной нормальной форме Грейбах (англ. Greibach weak normal form) называется контекстно-свободная грамматика, в которой могут содержаться только правила одного из следующих типов:
A→aγ
S→ε
где a — терминал, A — нетерминал (возможно, стартовый), S — стартовый нетерминал (причём он не должен встречаться в правых частях правил), ε — пустая строка, γ — строка из произвольного числа терминалов и нетерминал
================================================================
Докажи лемму об удалении терминалов:
________________________________________________________________
Каждому терминалу a поставим в соотвествие новый символ a′, которого нет в N∪Σ, такой что a′≠b′ для разных терминалов a и b.

Пусть N′=N∪{a′∣a∈Σ}

Пусть α=x1x2…xn — часть правила, тогда α′=y1y2…yn, где yi={xix′i; xi∈N; xi∈Σ для 1⩽i⩽n.

Построим грамматику G′=⟨Σ,N′,S,P′⟩, где P′={α′→β′∣α→β∈P}∪{a′→a∣a∈Σ}

Покажем, что L(Γ′)=L(Γ)

Пусть w∈L(Γ)
 Тогда в Γ существует вывод S=w0⇒w1⇒…⇒wn⇒w

Согласно конструкции P′, в Γ′ существует вывод S=w′0⇒w′1⇒w′2⇒…⇒w′n=v0⇒v1⇒v2⇒…⇒vm=w

Для 0⩽i⩽n−1 в переходах w′i⇒w′i+1 используем правило α′→β′, так как правило α→β было использовано при выводе wi⇒wi+1

Для 0⩽j⩽m−1 в переходах vj⇒vj+1 используем правила вида a′→a

Заменяем разрешенные в w′ символы на новые и получаем, что w∈L(Γ′)
Тогда L(Γ)⊆L(Γ′)


Пусть x∈L(Γ′). Тогда в Γ′ существует вывод S⇒∗x
Мы можем поменять порядок применения правил в этом выводе: сначала применяем только правила вида α′→β′, а потом только правила вида a′→a.

Из построения: после применения правила вида a′→a полученное a не может быть использовано при применении правил из P′

Изменение порядка вывода не меняет язык, то есть в Γ′ существует вывод: S=x′0⇒x′1⇒…⇒x′r⇒x′⇒y1⇒y2⇒…⇒ys=x, где для 0⩽i⩽r−1 x′i+1∈(N′)∗ и в переходе x′i→x′i+1 было использовано правило вывода α′→β′ и для 1⩽j⩽s было использовано правило a′→a, чтобы получить yj→yj+1

Получаем вывод в Γ: S=x0⇒x1⇒…⇒xn=x

Тогда L(Γ′)⊆L(Γ)

Таким образом, L(Γ′)=L(Γ)

Очевидно, что если грамматика была неукорочивающейся, то она такой и останется.
================================================================
Лемма (об удалении коротких правил) доказательство
________________________________________________________________
Сначала по Γ построим грамматику Γ′′=⟨Σ,N′′,S,P′′⟩, как в доказательстве леммы 1. По Γ′′ построим грамматику Γ′, в которой:

N′=N′′∪{D}, где D — новый символ, P′ получаем из P′′ заменой всех правил вида α→β∈P′′, где |α|>|β|, на правила вида α→βD|α|−|β|, и добавлением правила D→ε.
Теперь все правила в P′ имеет требуемую форму.

Покажем, что L(Γ′)=L(Γ)

Заметим, что замена правила α→β на α→βD|α|−|β| не меняет язык грамматики, потому что D переходит только в ε, а других правил для D нет.

Тогда получаем, что L(Γ)⊆L(Γ′), аналогично обратные изменения не меняют язык, то есть L(Γ′)⊆L(Γ).
================================================================
Порядок грамматики
________________________________________________________________
Для любой грамматики Γ=⟨Σ,N,S,P⟩ порядка n⩾3, такой что: любое правило из P′ имеет вид α→β, где α∈(N′)+ и β∈(N′)+ и |α|⩽|β| или A→a или A→ε, где A∈N′ и a∈T может быть построена грамматика Γ′=⟨Σ,N′,S,P′⟩ порядка n−1 такая, что L(Γ′)=L(Γ)
================================================================
Мгновенное описание
________________________________________________________________
Мгновенное описание (англ. instantaneous descriptions) — это набор ⟨q,α,γ⟩, где q — текущее состояние, α — остаток строки, γ — содержимое стека.
================================================================
Детерминированный автомат с магазинной памятью
________________________________________________________________
Детерминированным автоматом с магазинной памятью (англ. deterministic pushdown automaton) называется автомат с магазинной памятью, для которого выполнены следующие условия:
8q∈Q,a∈Σ∪{ε},X∈Γ⇒δ(q,a,X) имеет не более одного элемента — δ:Q×Σ∪{ε}×Γ→Q×Γ∗
Если δ(q,a,X) непусто для некоторого a∈Σ, то δ(q,ε,X) должно быть пустым.
================================================================
Детерминированный автомат с магазинной памятью, допуск по пустому стеку
________________________________________________________________
Определим детерминированный автомат с магазинной памятью, допускающий по пустому стеку (англ. PDA accepting by empty stack), как детерминированный автомат с магазинной памятью, у которого нет множества T допускающих состояний. Автомат заканчивает свою работу как только стек становится пустым.
Определим для него множество допускающих слов N={ω∣(q0,a0,Z0)⊢∗(p,ϵ,ϵ)}, где p — произвольное состояние.
================================================================
Правый контекст это
________________________________________________________________
Правым контекстом (англ. right context) C_R_L(y) слова y в языке L называется множество {z∣yz∈L}
================================================================
Левый контекст это
________________________________________________________________
Левым контекстом (англ. left context) C_L_L(y) слова y в языке L называется множество {z∣zy∈L}
================================================================
Двухсторонний контекст это
________________________________________________________________
Двухсторонним контекстом (англ. two-sided context) C_L(y) слова y в языке L называется множество {⟨x,z⟩∣xyz∈L}
================================================================