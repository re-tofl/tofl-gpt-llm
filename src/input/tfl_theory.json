[
        {
            "question": "Что такое язык Лукасевича",
            "answer": "Языком Лукасевича над n + 1 буквами называется контекстно-свободный язык над алфавитом {a0, a1,...,an}, порождаемый грамматикой S -> a0, S -> a1S, S -> a2SS, ..., S -> anSn. Замечание: При любом n ∈ N грамматика является однозначной."
        },
        {
            "question": "Что такое язык Дика",
            "answer": "Языком Дика над 2n\nбуквами называется контекстно-свободный язык над алфавитом\n{a1, b1, a2, b2,...,an, bn}, порождаемый грамматикой S → ε,\nS → a1Sb1S, ..., S → anSbnS.\nЗамечание: Словами этого языка являются последовательности правильно вложенных скобок n типов.\nЗамечание: При любом n ∈ N грамматика является однозначной."
        },
         {
            "question": "Что такое автомат Мили",
            "answer": "Автомат Мили - это 6-ка (Q, Σ, Λ, δ, λ, q₀), где:\nQ - множество состояний автомата\nΣ - конечный входной алфавит\nΛ - конечный выходной алфавит\nδ - функция перехода, которая принимает текущее состояние и входной символ, и возвращает следующее состояние\nλ - функция вывода, которая принимает текущее состояние и входной символ, и возвращает выходной символ\nq₀ - начальное состояние"
        },
        {
            "question": "Какие есть свойства у класса детерминнированых контекстно-свободных языков",
            "answer": "Теорема: Каждый автоматный язык является детерминированным контекстно-свободным языком.\nТеорема: Язык L ⊆ Σ∗ является детерминированным\nконтекстно-свободным языком тогда и только тогда, когда\nнайдётся такой детерминированный МП-автомат M' = <Q', Σ, Γ', ∆', I', F'>, что\nL={w∈Σ∗ | <s,w,ε> |*-- <q,ε,α> для некоторых s∈I', q∈F', α∈Γ'∗}.\nТеорема: Пусть L — детерминированный контекстно-свободный язык. Тогда язык L не является существенно\nнеоднозначным.\nТеорема: Дополнение каждого детерминированного\nконтекстно-свободного языка является детерминированным\nконтекстно-свободным языком.\nПример 12.10. Язык L = {a^kb^mc^n | k != m или m != n}\nнад алфавитом {a, b, c} не является детерминированным контекстно-свободнымязыком, так как его дополнение не является\nконтекстно-свободным\nТеорема: Неверно, что для любых детерминированных контекстно-свободных языков L1 и L2 язык L1 ∩ L2\nтоже является детерминированным контекстно-свободным\nязыком.\nТеорема: Неверно, что для любых детерминированных контекстно-свободных языков L1 и L2 язык L1 ∪ L2\nтоже является детерминированным контекстно-свободным языком."
        },
        {
            "question": "Сформулируй теорему Клини",
            "answer": "Теорема Клини: Язык L является регулярным тогда и только тогда, когда он является автоматным\nЯзык L называется автоматным, если существует конечный автомат, распознающий этот язык."
        },
        {
            "question": "Что такое гомоморфизм афлавитов",
            "answer": "Пусть Σ1 и Σ2 — алфавиты. Если отображение h: Σ∗1 → Σ∗2 удовлетворяет условию h(x · y) = h(x)· h(y)\nдля всех слов x ∈ Σ∗1 и y ∈ Σ∗1, то отображение h называется\nгомоморфизмом (морфизмом).\nЗамечание: Если h — гомоморфизм, то h(ε) = ε.\nПример: Пусть Σ1 = {a, b} и Σ2 = {c}. Тогда\nотображение h: Σ∗1 → Σ∗2, заданное равенством h(w) = c^(2|w|), является гомоморфизмом.\nЗамечание: Каждый гомоморфизм однозначно определяется своими значениями на однобуквенных словах.\nОпределение 1.37. Если h: Σ∗1 → Σ∗2 — гомоморфизм и L ⊆ Σ∗1, то через h(L) обозначается язык {h(w) | w ∈ L}.\nПример: Пусть Σ = {a, b} и гомоморфизм h: Σ∗ → Σ∗ задан равенствами h(a) = abba и h(b) = ε. Тогда\nh({baa, bb}) = {abbaabba, ε}.\nОпределение 1.39. Если h: Σ∗1 → Σ∗2 — гом ом орфизм и L ⊆ Σ∗2, то через h^(−1)(L) обозначается язык {w ∈ Σ∗1 | h(w) ∈ L}.\nПример: Рассмотрим алфавит Σ = {a, b}. Пусть гом оморфизм h: Σ∗ → Σ∗ задан равенствами h(a) = ab и h(b) = abb.\nТогда h^(−1)({ε, abbb, abbab, ababab}) = {ε, ba, aaa}."
        },
        {
            "question": "Что такое алгебра контекстно-свободных языков",
            "answer": "Алгебраические свойства КС-языков:\nЕсли L — контекстно-свободный язык, то\nL∗ тоже контекстно-свободный язык.\nЕсли L1 и L2 — контекстно-свободные языки над алфавитом Σ, то L1 · L2 тоже контекстно-свободный\nязык.\nЕсли L1 и L2 — контекстно-свободные языки над алфавитом Σ, то L1 ∪ L2 тоже контекстно-свободный\nязык.\nЕсли L — контекстно-свободный язык, то\nL^R тоже контекстно-свободный язык.\nЕсли L — КС-язык, а R — регулярный язык, то L ∩ R — КС-язык.\nДополнение КС-языка в общем случае не является КС-языком."
        },
        {
            "question": "Что такое деревья вывода",
            "answer": "Выводам в контекстно-свободной грамматике соответствуют так называемые деревья вывода (или деревья\nразбора) — некоторые упорядоченные деревья, вершины которых помечены символами алфавита N ∪Σ.\nКорень дерева отвечает начальному символу. Каждому символу слова w1, на которую заменяется начальный символ на первом\nшаге вывода, ставится в соответствие вершина дерева, и к ней\nпроводится дуга из корня. Полученные таким образом непосредственные потомки корня упорядочены согласно порядку их меток\nв слове w1. Для тех из полученных вершин, которые помечены символами из множества N, делается аналогичное построение\nи т. д. Кроной дерева вывода называется слово, записанное в\nвершинах, помеченных символами из алфавита Σ.\nПример: Рассмотрим контекстно-свободную грамматику\nS -> SS, S -> ab, S -> aSb. Выводу S -> SS -> Sab -> SSab -> abSab -> ababab соответствует следующее дерево вывода:\n        S\n       / \\\n      S   S\n     / \\  |\\\n    S   S a b\n   /|   |\\\n  a b   a b"
        },
        {
            "question": "Что такое неукорачивающиеся грамматики",
            "answer": "Определение: Порождающая грамматика называется\nнеукорачивающей, если для каждого правила (α -> β) ∈ P\nвыполняется неравенство |α| <= |β|.\nТеорема: Существует алгоритм, позволяющий по\nпроизвольной неукорачивающей грамматике G и по слову w\nузнать, верно ли, что w ∈ L(G).\nТеорема: Каждая контекстная грамматика является неукорачивающей. Каждая неукорачивающая грамматика\nэквивалентна некоторой контекстной грамматике.\nПример: Грамматика S -> AST A, S -> AbA, A -> a,\nbT -> bb, AT -> TA эквивалентна контекстной грамматике S -> ASTA, S -> AbA, A -> a,\nbT -> bb, AT -> UT, UT -> UV, UV -> TV, TV -> TA."
        },
        {
            "question": "Перечисли свойства регулярных выражений",
            "answer": "Регулярные выражения образуют ассоциативное полукольцо с операциями (0, +, 1, ·), то есть для любых\nрегулярных выражений e, f и g выполняются следующие тождества:\n1. e+f = f+e,\n2. e+0 = e,\n3. (e+f)+g = e+(f+g),\n4. e·1 = e,\n5. 1·e = e,\n6. (e·f)·g = e·(f·g),\n7. e·(f+g) = e·f+e·g,\n8. (f+g)·e = f·e+g·e,\n9. e·0=0,\n10. 0·e = 0.\nРавенство понимается как равенство языков, задаваемых\nрегулярными выражениями.\nДля любых регулярных выражений e и f\nвыполняются следующие тождества:\n1. e+e = e,\n2. (1+e+ee+ ... +e^(n−1))(e^n)∗ = e∗ для любого n >= 1,\n3. (e∗f)∗e∗ = (e+f)∗,\n4. 1+e(fe)∗f = (ef)∗.\nЛемма: Для любых регулярных выражений e, f и g,\nесли e = ef+g и ε !∈ L(f), то e = gf∗."
        },
        {
          "question": "Что такое перевод конечного автомата в регулярное выражение",
          "answer": "Определение: Регулярное выражение над алфавитом Σ определяется рекурсивно следующимобразом: 0 является регулярнымвыражением; 1 является регулярным выражением; если\na ∈ Σ, то a является регулярным выражением; если e и f являются регулярными выражениями, то (e+f), (e·f) и e∗ тоже\nявляются регулярными выражениями. Вместо e·f часто пишут просто ef.\nПример. Пусть Σ = {a, b}. Тогда ((a·b)∗·(1+a)) является\nрегулярнымвыражениемнад алфавитом Σ.\nОпределение: Конечный автомат — это пятёрка M = <Q, Σ, ∆,I,F>, где\nΣ — конечный алфавит, Q и ∆ — конечные м ножества,\n∆ ⊆ Q × Σ∗ × Q, I ⊆ Q, F ⊆ Q. Элем енты Q называются состояниями, элементы I — начальными (initial) состояниями,\nэлементы F — заключительными или допускающими состояниями. Если <p, x, q> ∈ ∆, то <p, x, q> называется\nпереходом из p в q, а слово x — меткой этого\nперехода.\nПример: Пусть Q = {1, 2}, Σ = {a, b}, I = {2},\nF = {2}, ∆ = {<1, aaa, 1>, <1, ab, 2>, <1, b, 2>, <2, ε, 1>}. Тогда\n<Q, Σ, ∆,I,F> — конечный автом автомат.\nАлгоритм Томпсона (Данный алгоритм преобразовывает НКА в эквивалентный ДКА)\nАлгоритм преобразования ДКА в РВ:\nАлгебраический метод Бжозовского\nПри преобразовании ДКА в регулярное выражение создается система регулярных выражений \nдля каждого состояния в ДКА, а затем она решается для регулярных выражений Ri, связанных \nс терминальным состояниями qi. Построение уравнения происходит следующим образом: для каждого состояния qi уравнение Ri\nявляется объединением переходов, ведущих в это состояние. Переход a из qi в qj обозначается за aRi. Если qi\n- терминальное состояние, то в Ri добавляется ε. Это приводит к системе уравнений вида:\n\nR1=a1∗R1+a2∗R2+a3∗R3+...\nR2=a1∗R1+a2∗R2+a3∗R3+...+ε\n...\nRm=a1∗R1+a2∗R2+a3∗R3+...+ε\n\nгде ax = ∅ если нет перехода от Ri к Rj. Система может быть решена с помощью простой подстановки, \nза исключением случаев, когда неизвестное появляется как в правой, так и в левой части уравнения. \nДля этого можно воспользоваться теоремой Ардена:\n\nУравнение вида R=Q+RP, где P≠ε, имеет решение R=QP∗."
        },
        {
          "question": "Контекстно-свободная (КС) грамматика это",
          "answer": "КС грамматика - это грамматика, у которой в левых частях всех правил стоят только одиночные нетерминалы.\nЯзык, задаваемый контекстно-свободной грамматикой, называется контекстно-свободным языком.\nКС-грамматика: G = <N, ∑, P, S>, где правила имеют вид: A → β, где β ∈ (N + ∑)*"
        },
        {
          "question": "Левосторонний (Левый) вывод в КС грамматике это",
          "answer": "Вывод в КС-грамматике левосторонний (левый), если на каждом шаге вывода заменяется самое левое из всех вхождений нетерминальных символов, \nто есть каждый шаг вывода имеет вид: uAθ —> uβθ, где (A → β) ∈ P, A ∈ N и θ ∈ (N U ∑)*, u ∈ ∑*.\nЛевосторонний вывод однозначно восстанавливается по дереву вывода."
        },
        {
          "question": "Леворекурсивная КС грамматика это",
          "answer": "Леворекурсивная грамматика - это грамматика, в которой есть нетерминал, который может быть заменен на себя самого в левом направлении, то есть грамматика, имеющая хотя бы один леворекурсивный нетерминал.\n"
        },
        {
          "question": "Праворекурсивная КС грамматика это",
          "answer": "Праворекурсивная грамматика - это грамматика, в которой есть нетерминал, который может быть заменен на себя самого в правом направлении, то есть грамматика, имеющая хотя бы один праворекурсивный нетерминал.\n"
        },
        {
          "question": "Рекурсивная КС грамматика это\n",
          "answer": "Рекурсивная грамматика - это грамматика,  в которой все нетерминалы рекурсивные (кроме, может быть, S).\n"
        },
        {
          "question": "Бесполезный символ (нетерминал) в КС грамматике это\n",
          "answer": "Символ D (нетерминал) - бесполезный, если в грамматике нет вывода вида S → *wDy → *wvy, где v, w, y ∈ ∑*\n"
        },
        {
          "question": "Неукорачивающая КС грамматика это\n",
          "answer": "Неукорачивающая КС грамматика -  это грамматика, которая может производить бесконечно длинные строки, то есть грамматика без ε-правил. Пример неукорачивающей КС грамматики: S → aSb | a.\n"
        },
        {
          "question": "КС грамматика с цепным правилом это",
          "answer": "КС грамматика с цепным правилом - это КС грамматика, в которой есть правило вида A → B, где A, B ∈ N. Имеет правило замены, которое содержит цепочку нетерминалов.\nПример КС грамматики с цепным правилом: \nS → aBb | ε\nB → bB | a"
        },
        {
          "question": "КС грамматика без циклов",
          "answer": "КС грамматика без циклов - это КС грамматика, в которой нет правила: A → +A. То есть грамматика, которая не содержит циклов (кроме возможных циклов в терминальных символах), то есть, нетерминалы не могут быть заменены на себя самого через любое количество шагов.\nПример КС грамматики без циклов:\nS → aAb | ε\nA → b | c"
        },
        {
          "question": "Приведённая КС грамматика это",
          "answer": "Приведённая КС грамматика - это грамматика без циклов, без бесполезных символов и без цепных правил.\n"
        },
        {
          "question": "Алгоритм удаления бесполезных (непорождающих) символов в КС грамматике",
          "answer": "1. Берём все правила, в правой части которых есть хотя бы один терминал. Берём оттуда\nмножество всех терминалов и нетерминалов слева.\n2. Берём все правила, в правой части которых встречаются нетерминалы только из нашего\nмножества. Добавляем нетерминалы слева в наше множество. Повторяем.\n3. На каком то шаге множество стабилизируется (все выводимые правила будут учтены). В нашем\nмножестве остались терминалы и все небесполезные нетерминалы.\n4. Берём разность всех нетерминалов и нетерминалов из нашего построенного множества. Это\nбудут бесполезные нетерминалы.\n5. Удаляем все правила, в которых встречаются бесполезные нетерминалы"
        },
        {
          "question": "Алгоритм удаления недостижимых символов",
          "answer": "1. Берём множество, состоящее из S.\n2. Добавляем в наше множество все нетерминалы и терминалы, которые стоят в правой части\nправил, в левой части которых нетерминалы из нашего множества.\n3. На каком-то шаге множество стабилизируется (все выводимые правила будут учтены). В нашем\nмножестве остались только достижимые символы (терминалы и нетерминалы).\n4. Берём разность всех нетерминалов и нетерминалов из нашего построенного множества. Это\nбудут бесполезные нетерминалы. То же самое и с терминалами.\n5. Удаляем все правила, в которых встречаются бесполезные нетерминалы. То же самое и с терминалами."
        },
        {
          "question": "Алгоритм удаления ε-правил",
          "answer": "1. Нашли все ε-правила. Добавили в множество нетерминалы из левых частей этих ε-правил.\n2. Заменили во всех правилах нетерминалы из нашего множества на ε.\n3. Убрали все ε (ε^n = ε).\n4. Повторяем с шага 1, пока можем найти новые ε-правила.\n5. Для всех правил вида A → B, где для B существует ε-правило, добавим правила вида A → ε, если таких еще нет.\n6. Удаляем все изначальные ε-правила (т.е. те, которые нашли на 1-ом шаге).\n================================================================"
        },
        {
          "question": "Алгоритм удаления цепного правила",
          "answer": "Если встретилось цепное правило A → B, и в P есть правило вида B → α, α ∈ (N + ∑)*, то добавим правило A → α, а правило A → B вычеркнем.\n"
        },
        {
          "question": "напиши лемму Ардена",
          "answer": "Пусть X = (pX) | q, где X — неизвестное RE, а p, q —\nизвестные, причём ε /∈ L (p). Тогда X = (p)\n∗q.\nТо есть p\n∗q — наименьшая (но не единственная) неподвижная\nточка выражения px | q по отношению ⩽, и единственная, если\nε /∈ L (p)."
        },
        {
          "question": "Сформулируй теорему о замкнутости регулярных языыков",
          "answer": "Пусть L1,L2\n — регулярные языки над одним алфавитом Σ. Тогда следующие языки также являются регулярными:\n Языки, полученные путём применения следующих теоретико-множественных операций:\n L1∪L2,\n L1¯¯¯¯¯¯,\n L1∩L2,\n L1∖L2;\n L∗1;\n L1L2; \n L1←;"
        },
        {
          "question": "Сформулируй теоремы о построении LL(k) грамматики без пустых правил",
          "answer": "еорема 1 \nДля всякой LL(k)-\nграмматики существует и может быть эффективно построена LL(k + 1)-грамматика\nбез пустых правил, задающая тот же язык.\n\nТеорема 2 \nДля всякой LL(k)-грамматики без пустых правил можно построить LL(k)-грамматику в н.в.Грейбах, задающую тот же язык."
        },
        {
          "question": "Сформулируй лемму Розенкранца и Стирнса для обыкновенной грамматики",
          "answer": "Лемма 1 (Розенкранц и Стирнс [1970]). Для всякой обыкновенной грамматики G =\n(Σ, N, R, S), существует другая грамматика G0 = (Σ, N ∪ N0, R0, S0), где N0 = { A0| A ∈\nN }, удовлетворяющая следующим условиям.\n1. Всякий нетерминальный символ A ∈ N задаёт в G0 тот же язык, что и в G.\n2. Всякий нетерминальный символ A0 ∈ N в G0\nзадаёт тот же язык, что и в G, с\nисключённой пустой строкой: LG0(A0) = LG(A0) \\ {ε}. В частности, L(G0) = L(G) \\{ε}.\n3. Никакое правило из R0 не начинается с нетерминального символа из N.\n4. Если G — LL(k), то и G0 — тоже LL(k)."
        },
        {
          "question": "Напиши теорему о непересекающемся объединении LL(k)-языков",
          "answer": "Теорема (О непересекающемся объединении LL(k)-языков: Розенкранц и Стирнс [1970]).\nПусть L1, . . . , Ln ⊆ Σ\n∗ — попарно непересекающиеся LL(k)-языки, и пусть их объединение\nL1 ∪ . . . ∪ Ln регулярно. Тогда все языки L1, . . . , Ln должны быть регулярны."
        }
]
