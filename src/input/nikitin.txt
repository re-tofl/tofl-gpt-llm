Что такое язык Лукасевича
________________________________________________________________
Языком Лукасевича над n + 1 буквами называется контекстно-свободный
язык над алфавитом {a0, a1,...,an}, порождаемый грамматикой
S -> a0, S -> a1S, S -> a2SS, ..., S -> anSn
Замечание: При любом n ∈ N грамматика является однозначной.
================================================================
Что такое язык Дика
________________________________________________________________
Языком Дика над 2n
буквами называется контекстно-свободный язык над алфавитом
{a1, b1, a2, b2,...,an, bn}, порождаемый грамматикой S → ε,
S → a1Sb1S, ..., S → anSbnS.
Замечание: Словами этого языка являются последовательности правильно вложенных скобок n типов.
Замечание: При любом n ∈ N грамматика является однозначной.
================================================================
Что такое автомат Мили
________________________________________________________________
Автомат Мили - это 6-ка (Q, Σ, Λ, δ, λ, q₀), где:
Q - множество состояний автомата
Σ - конечный входной алфавит
Λ - конечный выходной алфавит
δ - функция перехода, которая принимает текущее состояние и входной символ, и возвращает следующее состояние
λ - функция вывода, которая принимает текущее состояние и входной символ, и возвращает выходной символ
q₀ - начальное состояние
================================================================
Какие есть свойства у класса детерминнированых контекстно-свободных языков
________________________________________________________________
Теорема: Каждый автоматный язык является детерминированным контекстно-свободным языком.
Теорема: Язык L ⊆ Σ∗ является детерминированным
контекстно-свободным языком тогда и только тогда, когда
найдётся такой детерминированный МП-автомат M' = <Q', Σ, Γ', ∆', I', F'>, что
L={w∈Σ∗ | <s,w,ε> |*-- <q,ε,α> для некоторых s∈I', q∈F', α∈Γ'∗}.
Теорема: Пусть L — детерминированный контекстно-свободный язык. Тогда язык L не является существенно
неоднозначным.
Теорема: Дополнение каждого детерминированного
контекстно-свободного языка является детерминированным
контекстно-свободным языком.
Пример 12.10. Язык L = {a^kb^mc^n | k != m или m != n}
над алфавитом {a, b, c} не является детерминированным контекстно-свободнымязыком, так как его дополнение не является
контекстно-свободным
Теорема: Неверно, что для любых детерминированных контекстно-свободных языков L1 и L2 язык L1 ∩ L2
тоже является детерминированным контекстно-свободным
языком.
Теорема: Неверно, что для любых детерминированных контекстно-свободных языков L1 и L2 язык L1 ∪ L2
тоже является детерминированным контекстно-свободным языком.
================================================================
Сформулируй теорему Клини
________________________________________________________________
Теорема Клини: Язык L является регулярным тогда и только тогда, когда он является автоматным
Язык L называется автоматным, если существует конечный автомат, распознающий этот язык.
================================================================
Что такое гомоморфизм афлавитов
________________________________________________________________
Пусть Σ1 и Σ2 — алфавиты. Если отображение h: Σ∗1 → Σ∗2 удовлетворяет условию h(x · y) = h(x)· h(y)
для всех слов x ∈ Σ∗1 и y ∈ Σ∗1, то отображение h называется
гомоморфизмом (морфизмом).
Замечание: Если h — гомоморфизм, то h(ε) = ε.
Пример: Пусть Σ1 = {a, b} и Σ2 = {c}. Тогда
отображение h: Σ∗1 → Σ∗2, заданное равенством h(w) = c^(2|w|), является гомоморфизмом.
Замечание: Каждый гомоморфизм однозначно определяется своими значениями на однобуквенных словах.
Определение 1.37. Если h: Σ∗1 → Σ∗2 — гомоморфизм и L ⊆ Σ∗1, то через h(L) обозначается язык {h(w) | w ∈ L}.
Пример: Пусть Σ = {a, b} и гомоморфизм h: Σ∗ → Σ∗ задан равенствами h(a) = abba и h(b) = ε. Тогда
h({baa, bb}) = {abbaabba, ε}.
Определение 1.39. Если h: Σ∗1 → Σ∗2 — гом ом орфизм и L ⊆ Σ∗2, то через h^(−1)(L) обозначается язык {w ∈ Σ∗1 | h(w) ∈ L}.
Пример: Рассмотрим алфавит Σ = {a, b}. Пусть гом оморфизм h: Σ∗ → Σ∗ задан равенствами h(a) = ab и h(b) = abb.
Тогда h^(−1)({ε, abbb, abbab, ababab}) = {ε, ba, aaa}.
================================================================
Что такое алгоритм восходящего разбора
________________________________________________________________
Из книги Ахо-Ульман.
Алгоритм: Восходящий разбор с возвратами
Вход. КС-грамматика G = (N, S, P, S) без циклов и е-правил
(все ее правила занумерованы от 1 до р) и входная цепочка
w = a1a2.. ,аn (n>=1).
Выход. Один обращенный правый разбор, если он сущест-
существует, и слово «ошибка» в противном случае.
Метод.
(1) Произвольным образом упорядочить правила.
(2) Алгоритм будет изложен в терминах 4-компонентных
конфигураций, подобных тем, что использовались в алгорит-
алгоритме 4.1. В конфигурации (s, i, аlf, bet)
    (а) s представляет состояние алгоритма,
    (б) i представляет текущую позицию входного указателя
    (предполагается, что (n + 1)-м входным символом служит
    правый концевой маркер $),
    (в) аlf—содержимое магазина L1 (верх которого располо-
    расположен справа)
    (г) bet — содержимое магазина L2 (верх которого располо-
    расположен слева).

Как и раньше, алгоритм может находиться в одном из трех
состояний q, b или t. В магазине L1 будет храниться цепочка
терминалов и нетерминалов, из которой выводится часть вход-
входной цепочки, расположенная слева от входного указателя.
В магазине L2 будет храниться история переносов и сверток,
необходимых для получения из входной цепочки содержимого
магазина L1,
(3) Начальная конфигурация алгоритма —(q, 1$, е),
(4) Сам алгоритм работает так. Начинаем с попытки приме-
применить шаг 1.

Шаг 1. Попытка свертки
(q, i, alf*bet, gam) |-- (q,i,alf*A, j*gam)
при условии, что А->bet — правило из Р с номером j и bet пер-
первая правая часть в линейном упорядочении, определенном в (1),
которая является суффиксом цепочки alfbet. Номер этого правила
записывается в L2. Если шаг 1 применим, повторить его.
В противном случае перейти к шагу 2.

Шаг 2. Перенос
(q,i,alf,gam) |-- (q, i+1, alf*ai, s*gam)
при условии, что i!=n+1. Перейти к шагу 1.
Если i = n+1, перейти к шагу 3.
При выполнении шага 2 i-й входной символ переносится в
верхнюю часть магазина L1, позиция входного указателя уве-
увеличивается и в магазин L2 записывается s, чтобы указать, что
сделан перенос.

Шаг 3. Допускание
(q, n+1, $S, gam) |-- (t, n+1, $S, gam)
Выдать h(y), где h — гомоморфизм, определенный равенствами
h(s)=e, h(j) = j для всех номеров правил, h(у) — обращенный
правый разбор цепочки w. После этого остановиться.
Если шаг 3 неприменим, перейти к шагу 4.

Шаг 4. Переход в состояние возврата
(q, n+1, alf, gam) |-- (q, i, alf'*B, k*gam)
при условии, что a!=$S. Перейти к шагу 5.
Шаг 5. Возврат
(а) (b, i, alf*А, j*gam) |-- (q, i, alf'*B, k*gam)
если А—>bet — правило из Р с номером j, а следующим прави-
правилом в упорядочении (1), правая часть которого является суф-
суффиксом цепочки аlf*bet, является правило В —> bet' с номером к.
(Заметим, что alfbet~alf'bet'.) Перейти к шагу 1. (Здесь происходит
возврат к предыдущей свертке и делается попытка свертки с
помощью следующей альтернативы.)

(б) (b, n+1, alf*A, j*gam) |-- (b, n+1, alf*bet, gam)
если А—>bet — правило из Р с номером j и для цепочки alf*bet не
остается никакой другой свертки. Перейти к шагу 5. (Если дру-
других сверток не существует, надо «взять назад» данную свертку
н продолжать возврат, оставляя входной указатель на позициии n+1.) 


(в) (b, i, alf*A, j*gam) |-- (q, i + 1, alf*bet*a, s*gam)
если i!=n+1, А—>bet — правило из Р с номером j и для аlf*bet не
остается никакой другой свертки. Здесь символ а = аl переносится в 
магазин L1, а символ s поступает в L2. Перейти к шагу 1.
(Мы вернулись к предыдущей свертке и,
сверток нет, попробуем сделать перенос.)

(г) (b, i alf*a, s*gam) |-- (b, i-1, alf, gam)
если наверху магазина L2 находится символ переноса s. (Здесь
в позиции i исчерпаны все альтернативы и надо «взять назад»
операцию переноса. Входной указатель сдвигается влево, тер-
терминальный символ устраняется из L1, а символ переноса s —
из L2). Если этот шаг невыполним, объявить об ошибке.
Пример 4.4. Применим описанный алгоритм восходящего раз-
разбора к грамматике G с правилами
(1) E -> E+T
(2) E -> T
(3) T -> T*F
(4) T -> F
(5) F -> a
Если наверху магазина L1 появится Е+Т, то сначала попы-
попытаемся сделать свертку, используя Е—>Е+Т, а потом — исполь-
используя Е—>Т. Если же появится Т*F, то сначала попробуем
T->T*F, а потом T—>F. Для входа а*а восходящий алго-
алгоритм пройдет через конфигурации
(q,1,$,e) |-- (q,2,$a,s)
          |-- (q,2,$F, 5s)
          |-- (q,2,$T, 45s)
          |-- (q,2,$E, 245s)
          |-- (q,3,$E*, s245s)
          |-- (q,4,$E*a, ss245s)
          |-- (q,4,$E*F, 5ss245s)
          |-- (q,4,$E*T, 45ss245s)
          |-- (q,4,$E*E, 245ss245s)
          |-- (b,4,$E*E, 245ss245s)
          |-- (b,4,$E*T, 45ss245s)
          |-- (b,4,$E*F, 5ss245s)
          |-- (b,4,$E*a, ss245s)
          |-- (b,3,$E*, s245s)
          |-- (b,2,$E, 245s)
          |-- (q,3,$T*, s45s)
          |-- (q,4,$T*a, ss45s)
          |-- (q,4,$T*F, 5ss45s)
          |-- (q,4,$T, 35ss45s)
          |-- (q,4,$E, 235ss45s)
          |-- (t,4,$E, 235ss45s)
================================================================
Что такое алгебра контекстно-свободных языков
________________________________________________________________
Алгебраические свойства КС-языков:
Если L — контекстно-свободный язык, то
L∗ тоже контекстно-свободный язык.
Если L1 и L2 — контекстно-свободные языки над алфавитом Σ, то L1 · L2 тоже контекстно-свободный
язык.
Если L1 и L2 — контекстно-свободные языки над алфавитом Σ, то L1 ∪ L2 тоже контекстно-свободный
язык.
Если L — контекстно-свободный язык, то
L^R тоже контекстно-свободный язык.
Если L — КС-язык, а R — регулярный язык, то L ∩ R — КС-язык.
Дополнение КС-языка в общем случае не является КС-языком.
================================================================
Что такое деревья вывода
________________________________________________________________
Выводам в контекстно-свободной грамматике соответствуют так называемые деревья вывода (или деревья
разбора) — некоторые упорядоченные деревья, вершины которых помечены символами алфавита N ∪Σ.
Корень дерева отвечает начальному символу. Каждому символу слова w1, на которую заменяется начальный символ на первом
шаге вывода, ставится в соответствие вершина дерева, и к ней
проводится дуга из корня. Полученные таким образом непосредственные потомки корня упорядочены согласно порядку их меток
в слове w1. Для тех из полученных вершин, которые помечены символами из множества N, делается аналогичное построение
и т. д. Кроной дерева вывода называется слово, записанное в
вершинах, помеченных символами из алфавита Σ.
Пример: Рассмотрим контекстно-свободную грамматику
S -> SS, S -> ab, S -> aSb. Выводу S -> SS -> Sab -> SSab -> abSab -> ababab соответствует следующее дерево вывода:
        S
       / \
      S   S
     / \  |\
    S   S a b
   /|   |\
  a b   a b
================================================================
Что такое неукорачивающиеся грамматики
________________________________________________________________
Определение: Порождающая грамматика называется
неукорачивающей, если для каждого правила (α -> β) ∈ P
выполняется неравенство |α| <= |β|.
Теорема: Существует алгоритм, позволяющий по
произвольной неукорачивающей грамматике G и по слову w
узнать, верно ли, что w ∈ L(G).
Теорема: Каждая контекстная грамматика является неукорачивающей. Каждая неукорачивающая грамматика
эквивалентна некоторой контекстной грамматике.
Пример: Грамматика S -> AST A, S -> AbA, A -> a,
bT -> bb, AT -> TA эквивалентна контекстной грамматике S -> ASTA, S -> AbA, A -> a,
bT -> bb, AT -> UT, UT -> UV, UV -> TV, TV -> TA.
================================================================
Перечисли свойства регулярных выражений
________________________________________________________________
Регулярные выражения образуют ассоциативное полукольцо с операциями (0, +, 1, ·), то есть для любых
регулярных выражений e, f и g выполняются следующие тождества:
1. e+f = f+e,
2. e+0 = e,
3. (e+f)+g = e+(f+g),
4. e·1 = e,
5. 1·e = e,
6. (e·f)·g = e·(f·g),
7. e·(f+g) = e·f+e·g,
8. (f+g)·e = f·e+g·e,
9. e·0=0,
10. 0·e = 0.
Равенство понимается как равенство языков, задаваемых
регулярными выражениями.
Для любых регулярных выражений e и f
выполняются следующие тождества:
1. e+e = e,
2. (1+e+ee+ ... +e^(n−1))(e^n)∗ = e∗ для любого n >= 1,
3. (e∗f)∗e∗ = (e+f)∗,
4. 1+e(fe)∗f = (ef)∗.
Лемма: Для любых регулярных выражений e, f и g,
если e = ef+g и ε !∈ L(f), то e = gf∗.
================================================================
Что такое перевод конечного автомата в регулярное выражение
________________________________________________________________
Определение: Регулярное выражение над алфавитом Σ определяется рекурсивно следующимобразом: 0 является регулярнымвыражением; 1 является регулярным выражением; если
a ∈ Σ, то a является регулярным выражением; если e и f являются регулярными выражениями, то (e+f), (e·f) и e∗ тоже
являются регулярными выражениями. Вместо e·f часто пишут просто ef.
Пример. Пусть Σ = {a, b}. Тогда ((a·b)∗·(1+a)) является
регулярнымвыражениемнад алфавитом Σ.
Определение: Конечный автомат — это пятёрка M = <Q, Σ, ∆,I,F>, где
Σ — конечный алфавит, Q и ∆ — конечные м ножества,
∆ ⊆ Q × Σ∗ × Q, I ⊆ Q, F ⊆ Q. Элем енты Q называются состояниями, элементы I — начальными (initial) состояниями,
элементы F — заключительными или допускающими состояниями. Если <p, x, q> ∈ ∆, то <p, x, q> называется
переходом из p в q, а слово x — меткой этого
перехода.
Пример: Пусть Q = {1, 2}, Σ = {a, b}, I = {2},
F = {2}, ∆ = {<1, aaa, 1>, <1, ab, 2>, <1, b, 2>, <2, ε, 1>}. Тогда
<Q, Σ, ∆,I,F> — конечный автом автомат.
Алгоритм Томпсона (Данный алгоритм преобразовывает НКА в эквивалентный ДКА)
Алгоритм преобразования ДКА в РВ:
Алгебраический метод Бжозовского
При преобразовании ДКА в регулярное выражение создается система регулярных выражений 
для каждого состояния в ДКА, а затем она решается для регулярных выражений Ri, связанных 
с терминальным состояниями qi. Построение уравнения происходит следующим образом: для каждого состояния qi уравнение Ri
является объединением переходов, ведущих в это состояние. Переход a из qi в qj обозначается за aRi. Если qi
- терминальное состояние, то в Ri добавляется ε. Это приводит к системе уравнений вида:

R1=a1∗R1+a2∗R2+a3∗R3+...
R2=a1∗R1+a2∗R2+a3∗R3+...+ε
...
Rm=a1∗R1+a2∗R2+a3∗R3+...+ε

где ax = ∅ если нет перехода от Ri к Rj. Система может быть решена с помощью простой подстановки, 
за исключением случаев, когда неизвестное появляется как в правой, так и в левой части уравнения. 
Для этого можно воспользоваться теоремой Ардена:

Уравнение вида R=Q+RP, где P≠ε, имеет решение R=QP∗.
================================================================