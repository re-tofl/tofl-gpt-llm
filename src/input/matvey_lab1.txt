Что такое сильная и слабая бисимуляция?
________________________________________________________________

Сильная бисимуляция
Пусть есть два конечных автомата или системы с переходами, A и B, со множествами состояний S_A и S_B соответственно. Сильная бисимуляция — это отношение R⊆S_A×S_B, которое выполняется, если для любой пары состояний (s_A, s_B)∈R:
1. Если в A из состояния s_A​ есть переход по метке α в состояние s_A'​, то в B из состояния s_B​ тоже должен быть переход по α в состояние s_B'​, и (s_A', s_B')∈R.
2. Аналогично, если в B из состояния s_B​ есть переход по α, то в A из состояния s_A также должен быть переход по α, и эти состояния снова должны быть в отношении R.

Слабая бисимуляция

Пусть снова есть два конечных автомата или системы с переходами, A и B, со множествами состояний S_A​ и S_B​. Слабая бисимуляция — это отношение R⊆S_A×S_B, где:
1. Если в A из состояния s_A есть последовательность переходов, включая нулевое или более количество τ-переходов, по метке α в состояние s_A'​, то в B также должна быть последовательность переходов, включая нулевое или более количество τ-переходов, по метке α в состояние s_B', и (s_A', s_B')∈R.
2. Аналогично, если в B из состояния s_B​ есть последовательность переходов по метке α в состояние s_B'​, то в A должна быть соответствующая последовательность переходов.

================================================================

Что такое поведенческая эквивалентность? В чем отличие от бисимуляции?
________________________________________________________________

Поведенческая эквивалентность — это понятие, используемое в теории конечных автоматов и систем с переходами для описания того, что два состояния (или две системы) ведут себя одинаково с точки зрения наблюдателя. 
Два состояния считаются поведенчески эквивалентными, если при одинаковых входных данных они переходят в эквивалентные состояния и производят одинаковые выходы.
Поведенческая эквивалентность — это более общее понятие, чем бисимуляция. В случае поведенческой эквивалентности важно только внешнее поведение, а не структура переходов в системе.

================================================================

Что такое обратная бисимуляция?
________________________________________________________________

Обратная бисимуляция — это разновидность отношения бисимуляции, которая используется для сравнения поведения состояний в системах с переходами, таких как конечные автоматы. 
В классической бисимуляции сравниваются шаги из одного состояния в другое (переходы), но в обратной бисимуляции мы смотрим на предыдущие шаги, то есть как состояния "возвращаются" к предыдущим состояниям через обратные переходы.

================================================================

Напиши доказательство теоремы Бржозовского?

________________________________________________________________

Утверждение 1.
Автомат является детерминированным тогда и только тогда, когда левые языки его состояний попарно не пересекаются.
Утверждение 2.
Если A распознает язык L, то r(A) распознает r(L).
Утверждение 3.
Если левый язык состояния q в A — L_g(q), тогда его левый язык в r(A) — L_d(q). Аналогично для правого языка q.
Утверждение 4.
Правый язык состояния q′d(A) эквивалентен объединению правых языков состояний q автомата A, принадлежащих множеству q′.
Утверждение 5.
Детерминированный автомат минимален тогда и только тогда, когда правые языки его состояний различны и все состояния достижимы.

По построению автомат drdr(A) детерминированный. Согласно утверждению 2, он распознает язык L.
Покажем, что все правые языки drdr(A) различны. Из утверждения 1, левые языки dr(A) попарно не пересекаются. Из утверждения 3, правые языки rdr(A) являются левыми языками dr(A). Таким образом, они попарно не пересекаются. Согласно утверждению 4, правый язык drdr(A) — объединение правых языков rdr(A). Поскольку правые языки rdr(A) попарно не пересекаются, все правые языки drdr(A) различны.
Так как все правые языки drdr(A) различны, согласно утверждению 5 автомат drdr(A) минимальный.

================================================================

Опиши алгоритм Ахо-Корасика.
________________________________________________________________

Алгоритм Ахо-Корасика
Описание:
Алгоритм Ахо-Корасика используется для поиска нескольких строк в тексте одновременно. 
Он строит автомат, который позволяет эффективно находить все вхождения заданных подстрок (шаблонов) в строке текста за время, пропорциональное длине текста и общему числу символов в шаблонах.
Этот алгоритм сочетает в себе элементы автоматного и префиксного дерева (Trie).
Основные этапы:
1. Построение префиксного дерева (Trie): Сначала создается префиксное дерево для всех шаблонов. Каждый узел дерева представляет символ, а путь от корня до узла соответствует префиксу одного из шаблонов.
2. Добавление переходов: На каждом уровне префиксного дерева добавляются переходы для символов, которые не соответствуют существующим путям, с использованием "состояний неудачи", чтобы указать, куда переходить в случае неудачи.
3. Построение состояний неудачи: Каждому состоянию (узлу) присваивается состояние неудачи, указывающее, на какой узел следует переходить, если соответствующий символ не найден. Это позволяет обрабатывать текст более эффективно, избегая повторных проверок.
4. Поиск: Текст обрабатывается одним проходом. При чтении каждого символа проверяются возможные переходы в автомате, и при нахождении конца шаблона фиксируется соответствующее вхождение.

================================================================

Опиши алгоритм Барроуза-Уилера.
________________________________________________________________

Алгоритм, используемый для предварительной обработки данных перед сжатием, разработанный для улучшения эффективности последующего кодирования. 
Преобразование Барроуза — Уилера меняет порядок символов во входной строке таким образом, что повторяющиеся подстроки образуют на выходе идущие подряд последовательности одинаковых символов.
Описание алгоритма
Преобразование выполняется в три этапа:
1. Составляется таблица всех циклических сдвигов входной строки.
2. Производится лексикографическая (в алфавитном порядке) сортировка строк таблицы.
3. В качестве выходной строки выбирается последний столбец таблицы преобразования и номер строки, совпадающей с исходной.

================================================================

Напишите лемму о разрастании для КС-грамматик.
________________________________________________________________

Пусть L — контекстно-свободный язык над алфавитом Σ, тогда существует такое n, что для любого слова ω∈L длины не меньше n найдутся слова u,v,x,y,z∈Σ∗, для которых верно: uvxyz=ω,vy≠ε,|vxy|⩽n и ∀k⩾0 uv_kxy_kz∈L.

================================================================

Опиши способы получения минимальных автоматов.
________________________________________________________________

Таблица переходов

Если заданы таблица переходов и эквивалентное разбиение Σ1..Σň автомата S, то таблица переходов Š может быть построена следующим образом:
1. Заменить обозначение каждого состояния, имеющегося в таблице S на обозначение класса, которому данное состояние принадлежит.
2. Из каждой группы строк с одинаковыми обозначениями в клетках основного столбца вычеркнуть все строки, кроме одной.
Полученная при этом таблица является таблицей переходов Š.

Граф переходов

Если заданы граф переходов (диаграмма состояний) и эквивалентное разбиение Σ1..Σň автомата S, то граф переходов Š может быть построен следующим образом:
1. Заменить обозначение каждого состояния, имеющегося в графе переходов S на обозначение класса, к которому относится данное состояние.
2. Объединить все одинаково обозначенные состояния (рассматривая дуги графа как «гибкие связи») и представить объединенные состояния одним состоянием, имеющим общее обозначение.
3. Из каждой группы дуг, имеющих общее исходное и общее конечное состояние вычеркнуть все, кроме одной.
Полученный в результате граф будет графом Š.

Матрица переходов

Если заданы матрица переходов и эквивалентное разбиение Σ1..Σň автомата S, то матрица переходов Š может быть построена следующим образом:
1. Провести симметрическую перестановку и симметрическое разбиение [S] так, чтобы строки (и столбцы) группировались соответственно классам эквивалентности S (эту же матрицу можно получить при матричном методе эквивалентного разбиения).
2. Заменить все обозначения строк (и столбцов) каждой группы, представляющей класс эквивалентности, одним обозначением этого класса.
3. Заменить каждую подматрицу в разбитой матрице одной клеткой, содержащей все пары вход-выход, которые имеются в любой строке этой подматрицы (все строки в любой такой подматрице содержат одно и то же множество пар вход-выход).
Полученная в результате матрица является матрицей переходов Š.

================================================================

Напиши свойства минимального автомата.
________________________________________________________________

Если Š является минимальной формой автомата S, то:
1. Š является единственной минимальной формой с точностью до обозначения состояний
2. Š=S
3. Никакие два состояния Š не являются эквивалентными
4. Не существует автомата, эквивалентного S и меньшего (с меньшим числом состояний), чем Š.

================================================================

Напиши определение правоконтекстной грамматики.
________________________________________________________________

Правоконтекстная грамматика — это тип грамматики в теории формальных языков, где правила переписывания зависят от контекста символов, стоящих справа от переписываемого нетерминала. 
Такие грамматики формализуются следующим образом:
Правило грамматики имеет вид: αAβ→αγβ, где A — это нетерминальный символ, α и β — строки из терминалов и нетерминалов, а γ — строка, которая заменяет A. 
Важно, что заменяемый символ A может быть переписан только в случае, если справа от него стоит строка β, что и придает контекстность правилам.

================================================================

Опиши алгоритм Кока-Янгера-Касами.
________________________________________________________________

Алгоритм Кока-Янгера-Касами — алгоритм, позволяющий по слову узнать, выводимо ли оно в заданной КС-грамматике в нормальной форме Хомского. Любую КС-грамматику можно привести к НФХ, поэтому алгоритм является универсальным для любой КС-грамматики.
Шаги алгоритма:
1. Инициализация таблицы:

Пусть строка w имеет длину n. Создаём двумерную таблицу T размером n×n, где T[i,j] будет содержать множество нетерминалов, которые могут породить подстроку строки w, начиная с позиции i и имеющую длину j.

2. Заполнение таблицы для подстрок длины 1:

Для каждой подстроки длиной 1 (каждого символа строки), если есть правило вида A→a, где a — символ подстроки, то заполняем соответствующую ячейку таблицы T[i,1] нетерминалом A. Это инициализирует таблицу, заполняя её для самых маленьких подстрок (индивидуальных символов).

3. Заполнение таблицы для подстрок большей длины:

Для каждого l от 2 до n (длина подстроки), для каждой позиции i (начальная позиция подстроки) и для каждой k от 1 до l−1, проверяем возможные разбиения подстроки на две части.
Если есть правило A→BC в грамматике, и если нетерминал B может породить левую часть подстроки (то есть T[i,k] содержит B), а C может породить правую часть подстроки (то есть T[i+k,l−k] содержит C), то добавляем A в T[i,l].

4. Результат:

Если в ячейке T[1,n] (которая соответствует всей строке длины n) содержится стартовый символ грамматики, то строка принадлежит языку. В противном случае строка не может быть порождена грамматикой.

================================================================

Напишите определение леммы о разрастании в общем виде.
________________________________________________________________

Если язык L является регулярным, то существует число n⩾1 такое что для любого слова uwv из языка L, где |w|⩾n может быть записано в форме uwv=uxyzv, где слова x, y и z такие, что |xy|⩽n, |y|⩾1 и ux(y^i)zv принадлежит языку L для любого целого числа i⩾0.

================================================================
